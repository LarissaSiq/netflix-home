{"version":3,"sources":["services/Tmdb.js","components/MovieRow/index.js","components/FeaturedMovie/index.js","components/Header/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","Tmdb","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","w","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","FeaturedMovie","yearMovie","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","join","Header","black","App","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","loadAll","list","originals","filter","random","floor","movieChoose","id","chooseInfo","scroll","scrollY","addEventListener","removeEventListener","href","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50c1376.chunk.js","sourcesContent":["const API_KEY = 'c9abacbc579cada4387e7bbe5a8230e5';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\nconst Tmdb = {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`),\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendações para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`),\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`),\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentário',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                default:\r\n                    info = null;\r\n                    break;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\nexport default Tmdb;","import React, { useState } from \"react\";\r\nimport './index.css';\r\nimport './responsive.css';\r\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\n\r\nexport function MovieRow({\r\n    title,\r\n    items\r\n}) {\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if (x > 0) {\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    };\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let w = items.results.length * 150;\r\n        if ((window.innerWidth - w) > x) {\r\n            x = (window.innerWidth - w) - 60;\r\n        }\r\n        setScrollX(x)\r\n    };\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{\r\n                    fontSize: 50\r\n                }} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{\r\n                    fontSize: 50\r\n                }} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './index.css';\r\nimport './responsive.css';\r\n\r\nexport function FeaturedMovie({\r\n    item\r\n}) {\r\n    const yearMovie = new Date(item.first_air_date);\r\n    const genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name);\r\n    }\r\n\r\n    let description = item.overview;\r\n    if (description.length > 255) {\r\n        description = description.substring(0, 255) + '...'\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"feature--vertical\">\r\n                <div className=\"feature--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} relevante</div>\r\n                        <div className=\"featured--year\">{yearMovie.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{description}</div>\r\n                    <div className=\"featured--btn\">\r\n                        <button className=\"featured--watch\">► Assistir</button>\r\n                        <button className=\"featured--list\">+ Minha Lista</button>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><b>Gêneros: </b>{genres.join(', ')}</div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport './index.css';\r\n\r\nexport function Header({\r\n    black\r\n}) {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Logonetflix.png\" alt=\"netflix\" />\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"user\" />\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\nimport Tmdb from \"./services/Tmdb\";\nimport { MovieRow } from \"./components/MovieRow/index\";\nimport { FeaturedMovie } from \"./components/FeaturedMovie/index\";\nimport { Header } from \"./components/Header/index\";\nimport './App.css';\n\nfunction App() {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      let originals = list.filter((item) => item.slug === 'originals');\n      let random = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let movieChoose = originals[0].items.results[random];\n      let chooseInfo = await Tmdb.getMovieInfo(movieChoose.id, 'tv');\n      setFeaturedData(chooseInfo);\n    }\n    loadAll()\n  }, []);\n\n  useEffect(() => {\n    const scroll = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      }\n      else {\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scroll);\n    return () => {\n      window.removeEventListener('scroll', scroll);\n    }\n  }, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n      <footer>\n        <p>copyright @2021 | feito por <a className=\"link\" href=\"https://github.com/LarissaSiq\"\n          target=\"blank\">\n          Larissa Siqueira\n        </a></p></footer>\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"loading\" />\n        </div>\n      }\n    </div>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}